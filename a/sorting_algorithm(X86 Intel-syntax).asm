section .data
    arr db 5, 2, 4, 6, 1, 3
    n equ $ - arr  ; вычисление длины массива

section .text
global _start

_start:
    ; Алгоритм сортировки пузырьком
    mov ecx, n        ; ecx - счетчик внешнего цикла (n - 1)
outer_loop:
    mov ebx, 0        ; ebx - флаг сортировки (0 - отсортировано)
    mov edx, ecx      ; edx - индекс верхней границы текущего прохода
    dec edx           ; уменьшаем на 1, т.к. сравниваем с предыдущим элементом

inner_loop:
    mov esi, arr      ; esi - адрес начала массива
    mov edi, 1        ; edi - индекс текущего элемента
    mov eax, edx      ; eax - верхняя граница текущего прохода
    dec eax           ; уменьшаем на 1, т.к. сравниваем с предыдущим элементом

    cmp edi, eax      ; если индекс текущего элемента больше верхней границы, выходим из цикла
    jg end_inner_loop

    mov al, byte [esi + edi]  ; загрузка текущего элемента в al
    mov dl, byte [esi + edi - 1]  ; загрузка предыдущего элемента в dl
    cmp al, dl        ; сравнение текущего и предыдущего элементов
    jge no_swap       ; если текущий >= предыдущего, пропускаем обмен

    ; обмен элементов в массиве
    mov byte [esi + edi], dl
    mov byte [esi + edi - 1], al
    mov ebx, 1        ; устанавливаем флаг сортировки в 1 (не отсортировано)
    
no_swap:
    inc edi           ; увеличиваем индекс текущего элемента
    jmp inner_loop    ; повторяем внутренний цикл

end_inner_loop:
    test ebx, ebx     ; проверяем флаг сортировки
    jnz outer_loop    ; если не отсортировано, повторяем внешний цикл

    ; завершение программы
    mov eax, 1        ; системный вызов для выхода
    xor ebx, ebx      ; код возврата 0
    int 0x80          ; вызов системного прерывания для завершения программы
