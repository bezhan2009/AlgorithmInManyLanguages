.section .data
    arr:
        .byte 5, 2, 4, 6, 1, 3
    n = . - arr

.section .text
.global _start

_start:
    # Алгоритм сортировки пузырьком
    movl n, %ecx        # ecx - счетчик внешнего цикла (n - 1)
outer_loop:
    movl $0, %ebx       # ebx - флаг сортировки (0 - отсортировано)
    movl %ecx, %edx     # edx - индекс верхней границы текущего прохода
    decl %edx           # уменьшаем на 1, т.к. сравниваем с предыдущим элементом

inner_loop:
    movl $arr, %esi     # esi - адрес начала массива
    movl $1, %edi       # edi - индекс текущего элемента
    movl %edx, %eax     # eax - верхняя граница текущего прохода
    decl %eax           # уменьшаем на 1, т.к. сравниваем с предыдущим элементом

    cmpl %edi, %eax     # если индекс текущего элемента больше верхней границы, выходим из цикла
    jg end_inner_loop

    movb (%esi,%edi), %al       # загрузка текущего элемента в al
    movb -1(%esi,%edi), %dl     # загрузка предыдущего элемента в dl
    cmpb %al, %dl               # сравнение текущего и предыдущего элементов
    jge no_swap                 # если текущий >= предыдущего, пропускаем обмен

    # обмен элементов в массиве
    movb %dl, (%esi,%edi)
    movb %al, -1(%esi,%edi)
    movl $1, %ebx        # устанавливаем флаг сортировки в 1 (не отсортировано)
    
no_swap:
    incl %edi            # увеличиваем индекс текущего элемента
    jmp inner_loop       # повторяем внутренний цикл

end_inner_loop:
    test %ebx, %ebx      # проверяем флаг сортировки
    jnz outer_loop       # если не отсортировано, повторяем внешний цикл

    # завершение программы
    movl $1, %eax        # системный вызов для выхода
    xorl %ebx, %ebx      # код возврата 0
    int $0x80            # вызов системного прерывания для завершения программы
